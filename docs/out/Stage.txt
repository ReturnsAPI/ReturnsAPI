* [**Enums**](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Stage#enums)  
  * [`Stage.Property`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Stage#Property)  

* [**Static Methods**](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Stage#static-methods)  
  * [`Stage.new`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Stage#new)  
  * [`Stage.find`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Stage#)  
  * [`Stage.find_all`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Stage#)  
  * [`Stage.print_tiers`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Stage#print_tiers)  
  * [`Stage.wrap`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Stage#)  

<br><br>

---

## Enums  

<a name="Property"></a>
```lua
Stage.Property = {
    NAMESPACE                      = 0  
    IDENTIFIER                     = 1  
    TOKEN_NAME                     = 2  
    TOKEN_SUBNAME                  = 3  
    SPAWN_ENEMIES                  = 4  
    SPAWN_ENEMIES_LOOP             = 5  
    SPAWN_INTERACTABLES            = 6  
    SPAWN_INTERACTABLES_LOOP       = 7  
    SPAWN_INTERACTABLE_RARITY      = 8  
    INTERACTABLE_SPAWN_POINTS      = 9  
    ALLOW_MOUNTAIN_SHRINE_SPAWN    = 10  
    CLASSIC_VARIANT_COUNT          = 11  
    IS_NEW_STAGE                   = 12  
    ROOM_LIST                      = 13  
    MUSIC_ID                       = 14  
    TELEPORTER_INDEX               = 15  
    POPULATE_BIOME_PROPERTIES      = 16  
    LOG_ID                         = 17  
}
```

<br><br>

namespace | string | The namespace the stage is in.
identifier | string | The identifier for the stage within the namespace.
token_name | string | The localization token for the stage's name.
token_subname | string | The localization token for the stage's subname.
spawn_enemies | |
spawn_enemies_loop | |
spawn_interactables | |
spawn_interactables_loop | |
spawn_interactable_rarity | |
interactable_spawn_points | |
allow_mountain_shrine_spawn | |
classic_variant_count | |
is_new_stage | bool |
room_list | |
music_id | number | The ID of the sound to play as background music.
teleporter_index | |
populate_biome_properties | |
log_id | number | The environment log ID of the stage.

<br><br>

---

## Static Methods  

<a name="new"></a>
```lua
Stage.new(identifier) -> Stage  
```

Creates a new stage with the given identifier if it does not already exist,
or returns the existing one if it does.

**Parameters**  
Parameter | Type | Description
| - | - | -
`identifier` | string | The identifier for the stage.

<br><br>

<a name=""></a>
```lua
Stage.find(identifier, [namespace]) -> Stage or nil  
```

Searches for the specified stage and returns it.
If no namespace is provided, searches in your mod's namespace first, and "ror" second.

**Parameters**  
Parameter | Type | Description
| - | - | -
`identifier` | string | The identifier to search for.
`[namespace]` | string | The namespace to search in.

<br><br>

<a name=""></a>
```lua
Stage.find_all(filter, [property]) -> table  
```

Returns a table of stages matching the specified filter and property.

**NOTE:** Filtering by a non-namespace property is *very slow*!
Try not to do that too much.

**Parameters**  
Parameter | Type | Description
| - | - | -
`filter` |  | The filter to search by.
`[property]` | number | The property to check. <br>[`Stage.Property.NAMESPACE`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Stage#Property) by default.

<br><br>

<a name="print_tiers"></a>
```lua
Stage.print_tiers() -> nil  
```

Prints the stage progression order.

**Parameters**  

<br><br>

<a name=""></a>
```lua
Stage.wrap(stage_id) -> Stage  
```

Returns a Stage wrapper containing the provided stage ID.

**Parameters**  
Parameter | Type | Description
| - | - | -
`stage_id` | number | The stage ID to wrap.