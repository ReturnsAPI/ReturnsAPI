* [**Static Methods**](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Instance#static-methods)  
  * [`Instance.create`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Instance#create)  
  * [`Instance.exists`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Instance#exists-static)  
  * [`Instance.destroy`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Instance#destroy-static)  
  * [`Instance.find`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Instance#find)  
  * [`Instance.find_all`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Instance#find_all)  
  * [`Instance.count`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Instance#count)  
  * [`Instance.get_data`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Instance#get_data)  
  * [`Instance.wrap`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Instance#wrap)  
  * [`Instance.is`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Instance#is)  

<br><br>

---

## Static Methods  

<a name="create"></a>
```lua
Instance.create(object, x, y) -> Instance  
```

Creates and returns an instance of the specified object.

Also exists as a [method of Object](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Object#create) .

**Parameters**  
Parameter | Type | Description
| - | - | -
`object` | Object | The object to spawn.
`x` | number | The x spawn coordinate. <br>`0` by default.
`y` | number | The y spawn coordinate. <br>`0` by default.

<br><br>

<a name="exists-static"></a>
```lua
Instance.exists(inst) -> bool  
```

Returns `true` if the instance exists, and `false` otherwise.

Also exists as an [instance method](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Instance#exists-instance) .

**Parameters**  
Parameter | Type | Description
| - | - | -
`inst` | Instance | The instance to check.

<br><br>

<a name="destroy-static"></a>
```lua
Instance.destroy(inst) -> nil  
```

Destroys the instance.

Also exists as an [instance method](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Instance#destroy-instance) .

**Parameters**  
Parameter | Type | Description
| - | - | -
`inst` | Instance | The instance to destroy.

<br><br>

<a name="find"></a>
```lua
Instance.find(object, n) -> Instance  
```

Returns the first (or *n*-th) instance of the specified object,
or an invalid instance (value of `-4`).

**Parameters**  
Parameter | Type | Description
| - | - | -
`object` | Object | The object to check.
`n` | number | The *n*-th instance, indexed from 1. <br>`1` by default.

<br><br>

<a name="find_all"></a>
```lua
Instance.find_all(object) -> table  
```

Returns a table of all instances of the specified object.

**NOTE:** The execution time scales with the number of
instances of the object, and can be *very* expensive at high numbers.
Try not to call this too much.

**Parameters**  
Parameter | Type | Description
| - | - | -
`object` | Object | The object to check.

<br><br>

<a name="count"></a>
```lua
Instance.count(object) -> number  
```

Returns the instance count of the specified object.

**Parameters**  
Parameter | Type | Description
| - | - | -
`object` | Object | The object to check.

<br><br>

<a name="get_data"></a>
```lua
Instance.get_data(instance, [subtable], [namespace]) -> table  
```

Returns a table unique to each instance (will be initially empty) and unique to each mod calling this.
(e.g., Given the same instance and two mods A and B, A calling `get_data` will return a different table to B calling `get_data`).

This table is useful for storing Lua data (such as tables) in instances, which cannot be done with normal instance variables.
It is automatically deleted upon the instance's destruction.

**Parameters**  
Parameter | Type | Description
| - | - | -
`instance` | Instance | The instance to get the table from.
`[subtable]` | string | If specified, returns a different table under the ID `subtable`. <br>Useful for organization and preventing variable name conflicts within a mod itself. <br>This string can be whatever you want.
`[namespace]` | string | If specified, returns another mod's table for the instance.

<br><br>

<a name="wrap"></a>
```lua
Instance.wrap(id) -> Instance  
```

Returns an Instance wrapper containing the provided instance.

**Parameters**  
Parameter | Type | Description
| - | - | -
`id` | number | The instance ID to wrap.

<br><br>

<a name="is"></a>
```lua
Instance.is(value) -> bool  
```

Returns `true` if `value` is an instance, and `false` otherwise.

**Parameters**  
Parameter | Type | Description
| - | - | -
`value` | RValue or Instance wrapper | The value to check.