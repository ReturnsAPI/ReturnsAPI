* [**Constants**](https://github.com/ReturnsAPI/ReturnsAPI/wiki/LootPool#constants)

* [**Static Methods**](https://github.com/ReturnsAPI/ReturnsAPI/wiki/LootPool#static-methods)
  * [`LootPool.new`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/LootPool#new)
  * [`LootPool.new_from_tier`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/LootPool#new_from_tier)
  * [`LootPool.find`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/LootPool#find)
  * [`LootPool.wrap`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/LootPool#wrap)

* [**Instance Methods**](https://github.com/ReturnsAPI/ReturnsAPI/wiki/LootPool#instance-methods)
  * [`lootPool:show_properties`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/LootPool#show_properties)
  * [`lootPool:add`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/LootPool#add)
  * [`lootPool:remove`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/LootPool#remove)
  * [`lootPool:roll`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/LootPool#roll)

<br><br>

---

## Constants

```lua
LootPool.COMMON            = 0
LootPool.UNCOMMON          = 1
LootPool.RARE              = 2
LootPool.EQUIPMENT         = 3
LootPool.BOSS              = 4
LootPool.BOSS_EQUIPMENT    = 5
LootPool.FOOD              = 6
```

<br><br>

---

## Static Methods

<a name="new"></a>
```lua
LootPool.new(identifier) -> LootPool
```

Creates a new loot pool with the given identifier if it does not already exist,  
or returns the existing one if it does.  

**Parameters**  
Parameter | Type | Description
| - | - | -
`identifier` | string | The identifier for the loot pool.

<br><br>

<a name="new_from_tier"></a>
```lua
LootPool.new_from_tier(tier) -> LootPool
```

Creates a new loot pool using an item tier as a base,  
automatically populating the pool's properties and  
setting the item tier's `_pool_for_reroll` properties.  

**Parameters**  
Parameter | Type | Description
| - | - | -
`tier` | ItemTier | The item tier to use as a base.

<br><br>

<a name="find"></a>
```lua
LootPool.find(identifier, [namespace]) -> LootPool or nil
```

Searches for the specified loot pool and returns it.  
If no namespace is provided, searches in your mod's namespace first, and vanilla pools second.  

**Parameters**  
Parameter | Type | Description
| - | - | -
`identifier` | string | The identifier to search for.
`[namespace]` | string | *Optional.* The namespace to search in.

<br><br>

<a name="wrap"></a>
```lua
LootPool.wrap(pool) -> LootPool
```

Returns an LootPool wrapper containing the provided loot pool.  

**Parameters**  
Parameter | Type | Description
| - | - | -
`pool` | number | The loot pool to wrap.

<br><br>

---

## Instance Methods

<a name="show_properties"></a>
```lua
lootPool:show_properties() -> nil
```

Prints the loot pool's properties.  

**Parameters**  
None

<br><br>

<a name="add"></a>
```lua
lootPool:add(item) -> nil
```

Adds an item to the loot pool.  

**Parameters**  
Parameter | Type | Description
| - | - | -
`item` | Item | The item to add.

<br><br>

<a name="remove"></a>
```lua
lootPool:remove(item) -> nil
```

Removes an item from the loot pool.  

**Parameters**  
Parameter | Type | Description
| - | - | -
`item` | Item | The item to remove.

<br><br>

<a name="roll"></a>
```lua
lootPool:roll([required_loot_tags], [disallowed_loot_tags]) -> nil
```

Rolls for a random item from the loot pool, taking  
into account allowed and disallowed loot tags.  

**Parameters**  
Parameter | Type | Description
| - | - | -
`[required_loot_tags]` | number or table | *Optional.* A bit sum of flags; the chosen item must have at least one. <br>Alternatively, table containing multiple flags can be provided. <br>`0` by default.
`[disallowed_loot_tags]` | number or table | *Optional.* A bit sum of flags; the chosen item must not have any of these. <br>Alternatively, table containing multiple flags can be provided. <br>`0` by default.

<br><br>

