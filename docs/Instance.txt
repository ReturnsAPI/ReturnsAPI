* [**Static Methods**](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Instance#static-methods)
  * [`Instance.exists`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Instance#exists-static)
  * [`Instance.find`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Instance#find)
  * [`Instance.find_all`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Instance#find_all)
  * [`Instance.count`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Instance#count)
  * [`Instance.wrap`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Instance#wrap)
  * [`Instance.wrap_invalid`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Instance#wrap_invalid)
  * [`Instance.get_data`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Instance#get_data)

* [**Instance Methods**](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Instance#instance-methods)
  * [`instance:exists`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Instance#exists-instance)
  * [`instance:destroy`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Instance#destroy)
  * [`instance:same`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Instance#same)
  * [`instance:is_colliding`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Instance#is_colliding)

<br><br>

---

## Static Methods

<a name="exists-static"></a>
```lua
Instance.exists(instance) -> bool
```

Returns `true` if the instance exists, and `false` otherwise.  
Also exists as an [`instance method`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Instance#exists-instance).  

**Parameters**  
Parameter | Type | Description
| - | - | -
`instance` | Instance | The instance to check.

<br><br>

<a name="find"></a>
```lua
Instance.find(instance) -> Instance
```

Returns the first instance of the specified object,  
or an invalid instance (value of -4).  

**Parameters**  
Parameter | Type | Description
| - | - | -
`instance` | Instance | The instance to check.

<br><br>

<a name="find_all"></a>
```lua
Instance.find_all(...) -> table, bool
```

Returns a table of all instances of the specified object,  
and a boolean that is `true` if the table is *not* empty.  

**Parameters**  
Parameter | Type | Description
| - | - | -
`...` |  | A variable amount of objects to check. <br>Alternatively, a table containing them can be provided.

<br><br>

<a name="count"></a>
```lua
Instance.count(object) -> number
```

Returns the instance count of the specified object.  

**Parameters**  
Parameter | Type | Description
| - | - | -
`object` | Object | The object to check.

<br><br>

<a name="wrap"></a>
```lua
Instance.wrap(instance) -> Instance
```

Returns an Instance wrapper containing the provided instance.  

**Parameters**  
Parameter | Type | Description
| - | - | -
`instance` | CInstance | The instance to wrap.

<br><br>

<a name="wrap_invalid"></a>
```lua
Instance.wrap_invalid() -> Instance
```

Returns an Instance wrapper containing a non-existent instance (specifically, the value `-4`).  

**Parameters**  
None

<br><br>

<a name="get_data"></a>
```lua
Instance.get_data(instance, [subtable], [namespace]) -> table
```

Returns a table unique to each instance (will be initially empty) and unique to each mod calling this.  
(e.g., Given the same instance and two mods A and B, A calling `get_data` will return a different table to B calling `get_data`).  
  
This table is useful for storing lua data (such as tables) in instances, which cannot be done with normal instance variables.  
It is automatically deleted upon the instance's destruction.  

**Parameters**  
Parameter | Type | Description
| - | - | -
`instance` | Instance | The instance to get the table from.
`[subtable]` | string | *Optional.* If specified, returns a different table under the ID `subtable`. <br>Useful for organization and preventing variable name conflicts within a mod itself. <br>This string can be whatever you want.
`[namespace]` | string | *Optional.* If specified, returns another mod's table for the instance.

<br><br>

---

## Instance Methods

<a name="exists-instance"></a>
```lua
instance:exists() -> bool
```

Returns `true` if the instance exists, and `false` otherwise.  
Also exists as a [`static method`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Instance#exists-static).  

**Parameters**  
None

<br><br>

<a name="destroy"></a>
```lua
instance:destroy() -> nil
```

Destroys the instance.  

**Parameters**  
None

<br><br>

<a name="same"></a>
```lua
instance:same(other) -> bool
```

Returns `true` if this instance is the same one as `other`.  

**Parameters**  
Parameter | Type | Description
| - | - | -
`other` | Instance | The other instance to check.

<br><br>

<a name="is_colliding"></a>
```lua
instance:is_colliding(object, [x], [y]) -> bool
```

Returns `true` if this instance is colliding with *any* instance of the specified object.  

**Parameters**  
Parameter | Type | Description
| - | - | -
`object` | Object | The object to check.
`[x]` | number | *Optional.* The x position to check at. <br>Uses this instance's current position by default.
`[y]` | number | *Optional.* The y position to check at. <br>Uses this instance's current position by default.

<br><br>

