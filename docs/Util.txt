* [**Static Methods**](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Util#static-methods)
  * [`Util.print`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Util#print)
  * [`Util.type`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Util#type)
  * [`Util.tostring`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Util#tostring)
  * [`Util.gm_trace`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Util#gm_trace)
  * [`Util.bool`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Util#bool)
  * [`Util.chance`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Util#chance)
  * [`Util.clamp`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Util#clamp)
  * [`Util.ease_in`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Util#ease_in)
  * [`Util.ease_out`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Util#ease_out)
  * [`Util.table_has`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Util#table_has)
  * [`Util.table_find`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Util#table_find)
  * [`Util.table_remove_value`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Util#table_remove_value)
  * [`Util.table_get_keys`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Util#table_get_keys)
  * [`Util.table_merge`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Util#table_merge)
  * [`Util.table_append`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Util#table_append)
  * [`Util.table_insert`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Util#table_insert)
  * [`Util.table_to_string`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Util#table_to_string)
  * [`Util.string_to_table`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Util#string_to_table)
  * [`Util.setmetatable_gc`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Util#setmetatable_gc)
  * [`Util.mixed_hyperbolic`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Util#mixed_hyperbolic)
  * [`Util.benchmark`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Util#benchmark)
  * [`Util.pad_string_left`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Util#pad_string_left)
  * [`Util.pad_string_right`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Util#pad_string_right)
  * [`Util.jit_off`](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Util#jit_off)

<br><br>

---

## Static Methods

<a name="print"></a>
```lua
Util.print(...) -> nil
```

Prints a variable number of arguments.  
Works just like regular `print`, but prints wrapper types instead of "table".  
  
Automatically replaces `print()` with this on `.auto()` import;  
the original is saved as `lua_print()`.  

**Parameters**  
Parameter | Type | Description
| - | - | -
`...` |  | A variable amount of arguments to print.

<br><br>

<a name="type"></a>
```lua
Util.type(value, [is_RAPI?]) -> string, [bool]
```

Returns the type of the value as a string.  
Wrappers (which are just tables) will have their type returned instead of "table".  
  
Automatically replaces `type()` with this on `.auto()` import;  
the original is saved as `lua_type()`.  

**Parameters**  
Parameter | Type | Description
| - | - | -
`value` |  | The value to check.
`[is_RAPI?]` | bool | *Optional.* If `true`, will return a bool as a second argument. <br>It will be `true` if the type is a RAPI wrapper, and `false` otherwise.

<br><br>

<a name="tostring"></a>
```lua
Util.tostring(value) -> string
```

Returns the string representation of the value.  
Works just like regular `tostring`, but "table" substrings  
are replaced with the appropriate wrapper type (if applicable).  
  
Automatically replaces `tostring()` with this on `.auto()` import;  
the original is saved as `lua_tostring()`.  

**Parameters**  
Parameter | Type | Description
| - | - | -
`value` |  | The value to make a string representation of.

<br><br>

<a name="gm_trace"></a>
```lua
Util.gm_trace() -> nil
```

Prints the results of `GM.debug_get_callstack()`.  
The value at the top was the most recent previous call.  

**Parameters**  
None

<br><br>

<a name="bool"></a>
```lua
Util.bool(value) -> bool
```

Converts a numerical value into a bool,  
returning `true` if > 0.5, and `false` otherwise.  
  
Other cases:  
Non-numerical, non-bool values will return `true`.  
`nil` will return `false`.  
  
Works just like [`GM.bool`](https://manual.gamemaker.io/lts/en/GameMaker_Language/GML_Reference/Variable_Functions/bool.htm).  

**Parameters**  
Parameter | Type | Description
| - | - | -
`value` |  | The value to convert.

<br><br>

<a name="chance"></a>
```lua
Util.chance(n) -> bool
```

Rolls for a binary outcome.  
Returns `true` on success, and `false` otherwise.  

**Parameters**  
Parameter | Type | Description
| - | - | -
`n` | number | The chance to succeed, between `0` and `1`.

<br><br>

<a name="clamp"></a>
```lua
Util.clamp(n, min, max) -> number
```

Clamps the given value between two boundaries.  

**Parameters**  
Parameter | Type | Description
| - | - | -
`n` | number | The number to clamp.
`min` | number | The minimum clamp value.
`max` | number | The maximum clamp value.

<br><br>

<a name="ease_in"></a>
```lua
Util.ease_in(x, [n]) -> number
```

Returns an ease-in value for a given value `x` between `0` and `1`.  

**Parameters**  
Parameter | Type | Description
| - | - | -
`x` | number | The value to ease, between `0` and `1`.
`[n]` | number | *Optional.* The easing power. <br>`2` (quadratic) by default.

<br><br>

<a name="ease_out"></a>
```lua
Util.ease_out(x, [n]) -> number
```

Returns an ease-out value for a given value `x` between `0` and `1`.  

**Parameters**  
Parameter | Type | Description
| - | - | -
`x` | number | The value to ease, between `0` and `1`.
`[n]` | number | *Optional.* The easing power. <br>`2` (quadratic) by default.

<br><br>

<a name="table_has"></a>
```lua
Util.table_has(table, value) -> bool
```

Returns `true` if the table contains the value, and `false` otherwise.  

**Parameters**  
Parameter | Type | Description
| - | - | -
`table` | table | The table to search through.
`value` |  | The value to search for.

<br><br>

<a name="table_find"></a>
```lua
Util.table_find(table, value) -> string
```

Returns the key of the value to search for.  

**Parameters**  
Parameter | Type | Description
| - | - | -
`table` | table | The table to search through.
`value` |  | The value to search for.

<br><br>

<a name="table_remove_value"></a>
```lua
Util.table_remove_value(table, value) -> nil
```

Removes the first occurence of the specified value from the table.  

**Parameters**  
Parameter | Type | Description
| - | - | -
`table` | table | The table to search through.
`value` |  | The value to remove.

<br><br>

<a name="table_get_keys"></a>
```lua
Util.table_get_keys(table) -> table
```

Returns a table of keys of the specified table.  

**Parameters**  
Parameter | Type | Description
| - | - | -
`table` | table | The table to get the keys of.

<br><br>

<a name="table_merge"></a>
```lua
Util.table_merge(...) -> table
```

Returns a new table containing the values from input tables.  
The tables are merged in order.  
  
Combining two number indexed tables will order them in the order that they were inputted.  
When mixing number indexed and string keys, the indexed values will come first in order, while string keys will come after unordered.  
Multiple tables with the same string key will take the value of the last table in argument order.  

**Parameters**  
Parameter | Type | Description
| - | - | -
`...` |  | A variable amount of tables to combine.

<br><br>

<a name="table_append"></a>
```lua
Util.table_append(dest, src) -> nil
```

Appends keys from `src` to `dest`.  
Existing keys will be overwritten.  

**Parameters**  
Parameter | Type | Description
| - | - | -
`dest` | table | The original table to append to.
`src` | table | The table to append.

<br><br>

<a name="table_insert"></a>
```lua
Util.table_insert(dest, src) -> nil
```

Inserts a table of values (`src`) to `dest`.  
Both should be numerically-indexed tables.  

**Parameters**  
Parameter | Type | Description
| - | - | -
`dest` | table | The original table to append to.
`src` | table | The table to append.

<br><br>

<a name="table_to_string"></a>
```lua
Util.table_to_string(table) -> string
```

Returns a string encoding of a *numerically-indexed* table.  
The table should contain only basic Lua types (`bool`, `number`, `string`, `table`, `nil`).  

**Parameters**  
Parameter | Type | Description
| - | - | -
`table` | table | The table to encode.

<br><br>

<a name="string_to_table"></a>
```lua
Util.string_to_table(string) -> table
```

Returns the table from a [string encoding](https://github.com/ReturnsAPI/ReturnsAPI/wiki/Util#table_to_string).  

**Parameters**  
Parameter | Type | Description
| - | - | -
`string` | string | The string to decode.

<br><br>

<a name="setmetatable_gc"></a>
```lua
Util.setmetatable_gc(table, metatable) -> table
```

A version of `setmetatable()` that allows for Lua 5.2's `__gc` metamethod.  

**Parameters**  
Parameter | Type | Description
| - | - | -
`table` | table | 
`metatable` | table | The metatable to assign to the table.

<br><br>

<a name="mixed_hyperbolic"></a>
```lua
Util.mixed_hyperbolic(stack_count, chance, [base_chance]) -> number
```

Returns the % chance (between `0` and `1`) of the stack count using a variant of hyperbolic scaling.  
The first stack will always equal the stack %, and not slightly under (as is with the normal hyperbolic formula used).  

**Parameters**  
Parameter | Type | Description
| - | - | -
`stack_count` | number | The stack count.
`chance` | number | The proc chance/scaling/etc. *per stack*, between `0` and `1`.
`[base_chance]` | number | *Optional.* A base value (between `0` and `1`), should the additional <br>stack value be different from the first stack.

<br><br>

<a name="benchmark"></a>
```lua
Util.benchmark(n, fn, [...]) -> nil
```

Benchmarks a function and prints the results (in milliseconds, up to 7 decimal places).  
The amount of milliseconds per frame is 16.66~ ms.  
  
"Leeway" here is a measure of how many times the function can be called  
per frame *in a vacuum* before stuttering starts to occur.  

**Parameters**  
Parameter | Type | Description
| - | - | -
`n` | number | The number of calls to make.
`fn` | function | The function to call.
`[...]` |  | *Optional.* A variable number of arguments to pass.

<br><br>

<a name="pad_string_left"></a>
```lua
Util.pad_string_left(str, length, [char]) -> strings
```

Returns a string with character padding on the  
left side to match the desired string length.  

**Parameters**  
Parameter | Type | Description
| - | - | -
`str` | string | The string to pad.
`length` | number | The desired string length.
`[char]` | string | *Optional.* The character to use. <br>`" "` (space) by default.

<br><br>

<a name="pad_string_right"></a>
```lua
Util.pad_string_right(str, length, [char]) -> strings
```

Returns a string with character padding on the  
right side to match the desired string length.  

**Parameters**  
Parameter | Type | Description
| - | - | -
`str` | string | The string to pad.
`length` | number | The desired string length.
`[char]` | string | *Optional.* The character to use. <br>`" "` (space) by default.

<br><br>

<a name="jit_off"></a>
```lua
Util.jit_off(fn) -> strings
```

Returns back the function (or table of functions) with JIT compilation disabled.  
Use in tandem with memory hooks.  

**Parameters**  
Parameter | Type | Description
| - | - | -
`fn` | function or table | A function or table of functions.

<br><br>

